package jetbrain.mps.cryptoexchange.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class TokenBalance_Constraints extends BaseConstraintsDescriptor {
  public TokenBalance_Constraints() {
    super(CONCEPTS.TokenBalance$wd);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    return properties;
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    Set<SNode> checkTokensExist = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode child : SLinkOperations.getChildren(SNodeOperations.as(parentNode, CONCEPTS.account$Fk), LINKS.TokenBalance$iIxI)) {
      if (SetSequence.fromSet(checkTokensExist).contains(SLinkOperations.getTarget(child, LINKS.token$WJby))) {
        return false;
      } else {
        SetSequence.fromSet(checkTokensExist).addElement(SLinkOperations.getTarget(child, LINKS.token$WJby));
      }
    }
    return true;
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:c2acfc4e-bba7-4c28-bd45-597d78d07316(jetbrain.mps.cryptoexchange.constraints)", "1861668639318136449");

  private static final class CONCEPTS {
    /*package*/ static final SConcept TokenBalance$wd = MetaAdapterFactory.getConcept(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa573bL, "jetbrain.mps.cryptoexchange.structure.TokenBalance");
    /*package*/ static final SConcept account$Fk = MetaAdapterFactory.getConcept(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL, "jetbrain.mps.cryptoexchange.structure.account");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink token$WJby = MetaAdapterFactory.getReferenceLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa573bL, 0x4ae7a0d4d1aa573eL, "token");
    /*package*/ static final SContainmentLink TokenBalance$iIxI = MetaAdapterFactory.getContainmentLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL, 0x4ae7a0d4d1aa5743L, "TokenBalance");
  }
}
