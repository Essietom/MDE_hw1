package jetbrain.mps.cryptoexchange.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new TokenBalance_Constraints();
      case 1:
        return new TokenPair_Constraints();
      case 2:
        return new TransferRequest_Constraints();
      case 3:
        return new account_Constraints();
      case 4:
        return new order_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa573bL), MetaIdFactory.conceptId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5749L), MetaIdFactory.conceptId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09f77540L), MetaIdFactory.conceptId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL), MetaIdFactory.conceptId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x2a868524b103cefcL)).seal();
}
