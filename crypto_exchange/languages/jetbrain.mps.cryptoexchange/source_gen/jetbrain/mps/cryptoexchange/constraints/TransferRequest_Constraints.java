package jetbrain.mps.cryptoexchange.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class TransferRequest_Constraints extends BaseConstraintsDescriptor {
  public TransferRequest_Constraints() {
    super(CONCEPTS.TransferRequest$jw);
  }

  public static class Amount_Property extends BasePropertyConstraintsDescriptor {
    public Amount_Property(ConstraintsDescriptor container) {
      super(PROPS.amount$SYCn, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:c2acfc4e-bba7-4c28-bd45-597d78d07316(jetbrain.mps.cryptoexchange.constraints)", "3414385088933437573"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      if ((SLinkOperations.getTarget(node, LINKS.Destination$Mli1) == null) || isEmptyString(SPropertyOperations.getString(node, PROPS.amount$SYCn))) {
        return true;
      }
      for (SNode bal : SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.Destination$Mli1), LINKS.TokenBalance$iIxI)) {
        if (new Float(SPropertyOperations.getString(bal, PROPS.balance$WJS_)) < new Float(SPropertyOperations.getString(node, PROPS.amount$SYCn))) {
          return false;
        }
      }
      return true;
    }
    private static boolean isEmptyString(String str) {
      return str == null || str.isEmpty();
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.amount$SYCn, new Amount_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TransferRequest$jw = MetaAdapterFactory.getConcept(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09f77540L, "jetbrain.mps.cryptoexchange.structure.TransferRequest");
  }

  private static final class PROPS {
    /*package*/ static final SProperty amount$SYCn = MetaAdapterFactory.getProperty(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09f77540L, 0x3b9502d85b032076L, "amount");
    /*package*/ static final SProperty balance$WJS_ = MetaAdapterFactory.getProperty(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa573bL, 0x4ae7a0d4d1aa5741L, "balance");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink Destination$Mli1 = MetaAdapterFactory.getReferenceLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09f77540L, 0x3b9502d85b10d9a0L, "Destination");
    /*package*/ static final SContainmentLink TokenBalance$iIxI = MetaAdapterFactory.getContainmentLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL, 0x4ae7a0d4d1aa5743L, "TokenBalance");
  }
}
