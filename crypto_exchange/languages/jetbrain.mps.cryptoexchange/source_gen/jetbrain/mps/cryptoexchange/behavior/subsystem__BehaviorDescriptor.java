package jetbrain.mps.cryptoexchange.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class subsystem__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d166L, "jetbrain.mps.cryptoexchange.structure.subsystem");

  public static final SMethod<Boolean> addAccount_id4PlGkpLjaxj = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("addAccount").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("4PlGkpLjaxj").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> removeAccount_id4PlGkpLjp6T = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("removeAccount").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("4PlGkpLjp6T").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Integer> getNextOrderId_id3DRWJW9YzO_ = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.class)).name("getNextOrderId").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3DRWJW9YzO_").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(addAccount_id4PlGkpLjaxj, removeAccount_id4PlGkpLjp6T, getNextOrderId_id3DRWJW9YzO_);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean addAccount_id4PlGkpLjaxj(@NotNull SNode __thisNode__, SNode a) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.accounts$VHb9)).addElement(a);
    return true;
  }
  /*package*/ static boolean removeAccount_id4PlGkpLjp6T(@NotNull SNode __thisNode__, SNode a) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.accounts$VHb9)).removeElement(a);
    return true;
  }
  /*package*/ static Integer getNextOrderId_id3DRWJW9YzO_(@NotNull SNode __thisNode__) {
    Integer max = 0;
    for (SNode a : SLinkOperations.getChildren(__thisNode__, LINKS.orders$RhuR)) {
      if (SPropertyOperations.getInteger(a, PROPS.ID$9Jt2) > max) {
        max = SPropertyOperations.getInteger(a, PROPS.ID$9Jt2);
      }
    }
    return max + 1;
  }

  /*package*/ subsystem__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) addAccount_id4PlGkpLjaxj(node, (SNode) parameters[0]));
      case 1:
        return (T) ((Boolean) removeAccount_id4PlGkpLjp6T(node, (SNode) parameters[0]));
      case 2:
        return (T) ((Integer) getNextOrderId_id3DRWJW9YzO_(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink accounts$VHb9 = MetaAdapterFactory.getContainmentLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d166L, 0x151908d59864d186L, "accounts");
    /*package*/ static final SContainmentLink orders$RhuR = MetaAdapterFactory.getContainmentLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d166L, 0x3a77f2ff09f76775L, "orders");
  }

  private static final class PROPS {
    /*package*/ static final SProperty ID$9Jt2 = MetaAdapterFactory.getProperty(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x2a868524b103cefcL, 0x2a868524b103ceffL, "ID");
  }
}
