package jetbrain.mps.cryptoexchange.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class cryptoExchange__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d598638a7aL, "jetbrain.mps.cryptoexchange.structure.cryptoExchange");

  public static final SMethod<String> getNextAccountAddress_id3Il0Hxr7C8a = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getNextAccountAddress").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3Il0Hxr7C8a").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getNextAccountAddress_id3Il0Hxr7C8a);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getNextAccountAddress_id3Il0Hxr7C8a(@NotNull SNode __thisNode__) {
    Integer max = 0;
    for (SNode sa : SLinkOperations.getChildren(__thisNode__, LINKS.SubSytem$bMmh)) {
      max = max + SLinkOperations.getChildren(sa, LINKS.accounts$VHb9).size();
    }
    return "0x" + max.toString();
  }

  /*package*/ cryptoExchange__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getNextAccountAddress_id3Il0Hxr7C8a(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink accounts$VHb9 = MetaAdapterFactory.getContainmentLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d166L, 0x151908d59864d186L, "accounts");
    /*package*/ static final SContainmentLink SubSytem$bMmh = MetaAdapterFactory.getContainmentLink(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d598638a7aL, 0x151908d59864d169L, "SubSytem");
  }
}
