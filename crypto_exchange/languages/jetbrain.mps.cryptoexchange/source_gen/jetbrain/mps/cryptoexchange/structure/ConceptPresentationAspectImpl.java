package jetbrain.mps.cryptoexchange.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_TokenBalance;
  private ConceptPresentation props_TokenNetwork;
  private ConceptPresentation props_TokenPair;
  private ConceptPresentation props_TransferRequest;
  private ConceptPresentation props_account;
  private ConceptPresentation props_cryptoExchange;
  private ConceptPresentation props_order;
  private ConceptPresentation props_savingOrder;
  private ConceptPresentation props_subsystem;
  private ConceptPresentation props_token;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.TokenBalance:
        if (props_TokenBalance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TokenBalance = cpb.create();
        }
        return props_TokenBalance;
      case LanguageConceptSwitch.TokenNetwork:
        if (props_TokenNetwork == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TokenNetwork = cpb.create();
        }
        return props_TokenNetwork;
      case LanguageConceptSwitch.TokenPair:
        if (props_TokenPair == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TokenPair = cpb.create();
        }
        return props_TokenPair;
      case LanguageConceptSwitch.TransferRequest:
        if (props_TransferRequest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransferRequest = cpb.create();
        }
        return props_TransferRequest;
      case LanguageConceptSwitch.account:
        if (props_account == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_account = cpb.create();
        }
        return props_account;
      case LanguageConceptSwitch.cryptoExchange:
        if (props_cryptoExchange == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_cryptoExchange = cpb.create();
        }
        return props_cryptoExchange;
      case LanguageConceptSwitch.order:
        if (props_order == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("order");
          props_order = cpb.create();
        }
        return props_order;
      case LanguageConceptSwitch.savingOrder:
        if (props_savingOrder == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3b9502d85b274741L, 0x3b9502d85b274747L, "token", "", "");
          props_savingOrder = cpb.create();
        }
        return props_savingOrder;
      case LanguageConceptSwitch.subsystem:
        if (props_subsystem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("subsystem");
          props_subsystem = cpb.create();
        }
        return props_subsystem;
      case LanguageConceptSwitch.token:
        if (props_token == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_token = cpb.create();
        }
        return props_token;
    }
    return null;
  }
}
