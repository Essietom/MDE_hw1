package jetbrain.mps.cryptoexchange.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptorImpl;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptTokenBalance = createDescriptorForTokenBalance();
  /*package*/ final ConceptDescriptor myConceptTokenNetwork = createDescriptorForTokenNetwork();
  /*package*/ final ConceptDescriptor myConceptTokenPair = createDescriptorForTokenPair();
  /*package*/ final ConceptDescriptor myConceptTransferRequest = createDescriptorForTransferRequest();
  /*package*/ final ConceptDescriptor myConceptaccount = createDescriptorForaccount();
  /*package*/ final ConceptDescriptor myConceptcryptoExchange = createDescriptorForcryptoExchange();
  /*package*/ final ConceptDescriptor myConceptorder = createDescriptorFororder();
  /*package*/ final ConceptDescriptor myConceptsavingOrder = createDescriptorForsavingOrder();
  /*package*/ final ConceptDescriptor myConceptsubsystem = createDescriptorForsubsystem();
  /*package*/ final ConceptDescriptor myConcepttoken = createDescriptorFortoken();
  /*package*/ final EnumerationDescriptor myEnumerationAccountType = new EnumerationDescriptor_AccountType();
  /*package*/ final EnumerationDescriptor myEnumerationleverageType = new EnumerationDescriptor_leverageType();
  /*package*/ final EnumerationDescriptor myEnumerationorderType = new EnumerationDescriptor_orderType();
  /*package*/ final EnumerationDescriptor myEnumerationtransferType = new EnumerationDescriptor_transferType();
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatype_decimal = new ConstrainedStringDatatypeDescriptorImpl(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L, "_decimal", "r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/5397459514337941337", "-?[0-9]+\\.[0-9]*([Ee][\\+\\-]?[0-9]+)?[dD]?");
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptTokenBalance, myConceptTokenNetwork, myConceptTokenPair, myConceptTransferRequest, myConceptaccount, myConceptcryptoExchange, myConceptorder, myConceptsavingOrder, myConceptsubsystem, myConcepttoken);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.TokenBalance:
        return myConceptTokenBalance;
      case LanguageConceptSwitch.TokenNetwork:
        return myConceptTokenNetwork;
      case LanguageConceptSwitch.TokenPair:
        return myConceptTokenPair;
      case LanguageConceptSwitch.TransferRequest:
        return myConceptTransferRequest;
      case LanguageConceptSwitch.account:
        return myConceptaccount;
      case LanguageConceptSwitch.cryptoExchange:
        return myConceptcryptoExchange;
      case LanguageConceptSwitch.order:
        return myConceptorder;
      case LanguageConceptSwitch.savingOrder:
        return myConceptsavingOrder;
      case LanguageConceptSwitch.subsystem:
        return myConceptsubsystem;
      case LanguageConceptSwitch.token:
        return myConcepttoken;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationAccountType, myEnumerationleverageType, myEnumerationorderType, myEnumerationtransferType, myCSDatatype_decimal);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForTokenBalance() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "TokenBalance", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa573bL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/5397459514337941307");
    b.version(2);
    b.property("balance", 0x4ae7a0d4d1aa5741L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L)).origin("5397459514337941313").done();
    b.associate("token", 0x4ae7a0d4d1aa573eL).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5723L).optional(false).origin("5397459514337941310").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTokenNetwork() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "TokenNetwork", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09e3a438L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/4213103153624884280");
    b.version(2);
    b.property("chainId", 0x3a77f2ff09e3a43bL).type(PrimitiveTypeId.INTEGER).origin("4213103153624884283").done();
    b.property("RPC", 0x3a77f2ff09e3a43dL).type(PrimitiveTypeId.STRING).origin("4213103153624884285").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTokenPair() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "TokenPair", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5749L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/5397459514337941321");
    b.version(2);
    b.property("price", 0x4ae7a0d4d1aa5757L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L)).origin("5397459514337941335").done();
    b.associate("TokenA", 0x4ae7a0d4d1aa5752L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5723L).optional(false).origin("5397459514337941330").done();
    b.associate("TokenB", 0x4ae7a0d4d1aa5754L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5723L).optional(false).origin("5397459514337941332").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTransferRequest() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "TransferRequest", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09f77540L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/4213103153626182976");
    b.version(2);
    b.property("type", 0x3b9502d85b03206fL).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3b9502d85b032071L)).origin("4293340948030759023").done();
    b.property("amount", 0x3b9502d85b032076L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L)).origin("4293340948030759030").done();
    b.associate("token", 0x3b9502d85b032087L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5723L).optional(false).origin("4293340948030759047").done();
    b.associate("Destination", 0x3b9502d85b10d9a0L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL).optional(false).origin("4293340948031658400").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForaccount() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "account", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/1520256062692053387");
    b.version(2);
    b.aggregate("TokenBalance", 0x4ae7a0d4d1aa5743L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa573bL).optional(true).ordered(true).multiple(true).origin("5397459514337941315").done();
    b.aggregate("transferRequest", 0x3b9502d85b085924L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09f77540L).optional(true).ordered(true).multiple(true).origin("4293340948031101220").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForcryptoExchange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "cryptoExchange", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d598638a7aL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/1520256062691969658");
    b.version(2);
    b.property("IP", 0x151908d59864d16dL).type(PrimitiveTypeId.STRING).origin("1520256062692053357").done();
    b.property("DomainName", 0x151908d59864d173L).type(PrimitiveTypeId.STRING).origin("1520256062692053363").done();
    b.aggregate("SubSytem", 0x151908d59864d169L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d166L).optional(false).ordered(true).multiple(true).origin("1520256062692053353").done();
    b.aggregate("Token", 0x2a868524b0fdb71bL).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5723L).optional(false).ordered(true).multiple(true).origin("3064282989106935579").done();
    b.aggregate("TokenNetwork", 0x3a77f2ff09e752c1L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09e3a438L).optional(false).ordered(true).multiple(true).origin("4213103153625125569").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorFororder() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "order", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x2a868524b103cefcL);
    b.class_(false, false, false);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/3064282989107334908");
    b.version(2);
    b.property("ID", 0x2a868524b103ceffL).type(PrimitiveTypeId.INTEGER).origin("3064282989107334911").done();
    b.property("Price", 0x2a868524b103cf03L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L)).origin("3064282989107334915").done();
    b.property("type", 0x19d5f9c39011d202L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09d97bf6L)).origin("1861668639318594050").done();
    b.property("amount", 0x3a77f2ff0a4b1d28L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L)).origin("4213103153631665448").done();
    b.property("leverage", 0x3b9502d85a7d5e9dL).type(PrimitiveTypeId.INTEGER).origin("4293340948021993117").done();
    b.associate("account", 0x2a868524b103cf06L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL).optional(false).origin("3064282989107334918").done();
    b.associate("TokenPair", 0x2a868524b103cf08L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5749L).optional(false).origin("3064282989107334920").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForsavingOrder() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "savingOrder", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3b9502d85b274741L);
    b.class_(false, false, false);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/4293340948033128257");
    b.version(2);
    b.property("amount", 0x3b9502d85b274742L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L)).origin("4293340948033128258").done();
    b.property("matureDate", 0x3b9502d85b274744L).type(PrimitiveTypeId.STRING).origin("4293340948033128260").done();
    b.property("Interest", 0x3b9502d85b274749L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5759L)).origin("4293340948033128265").done();
    b.associate("token", 0x3b9502d85b274747L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5723L).optional(false).origin("4293340948033128263").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForsubsystem() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "subsystem", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d166L);
    b.class_(false, false, false);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/1520256062692053350");
    b.version(2);
    b.property("name", 0x3a77f2ff09ddfa27L).type(MetaIdFactory.dataTypeId(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa575dL)).origin("4213103153624513063").done();
    b.aggregate("accounts", 0x151908d59864d186L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x151908d59864d18bL).optional(true).ordered(true).multiple(true).origin("1520256062692053382").done();
    b.aggregate("tokenPair", 0x151908d59864d188L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5749L).optional(true).ordered(true).multiple(true).origin("1520256062692053384").done();
    b.aggregate("orders", 0x3a77f2ff09f76775L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x2a868524b103cefcL).optional(true).ordered(true).multiple(true).origin("4213103153626179445").done();
    b.aggregate("savingOrder", 0x3b9502d85b27474dL).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3b9502d85b274741L).optional(true).ordered(true).multiple(true).origin("4293340948033128269").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorFortoken() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrain.mps.cryptoexchange", "token", 0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x4ae7a0d4d1aa5723L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:984aa0d0-cdbe-4539-96fb-298ff1435c32(jetbrain.mps.cryptoexchange.structure)/5397459514337941283");
    b.version(2);
    b.property("address", 0x4ae7a0d4d1aa5728L).type(PrimitiveTypeId.STRING).origin("5397459514337941288").done();
    b.property("decimal", 0x4ae7a0d4d1aa572aL).type(PrimitiveTypeId.INTEGER).origin("5397459514337941290").done();
    b.associate("network", 0x3a77f2ff09f60160L).target(0x885932350df545d0L, 0xbc76936b0ff5f304L, 0x3a77f2ff09e3a438L).optional(false).origin("4213103153626087776").done();
    return b.create();
  }
}
